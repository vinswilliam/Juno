apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.vw.juno"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            def propsFile = file("../keystore.properties")
            if (propsFile.exists()) {
                def props = new Properties()
                props.load(new FileInputStream(propsFile))
                storeFile = file(props['storeFile'])
                storePassword = props['storePassword']
                keyAlias = props['keyAlias']
                keyPassword = props['keyPassword']
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled = false
            debuggable = true
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    //android support libraries
    implementation "com.android.support:design:$vSupportLib"
    implementation "com.android.support:recyclerview-v7:$vSupportLib"
    implementation "com.android.support:cardview-v7:$vSupportLib"
    implementation "com.android.support:support-fragment:$vSupportLib"
    implementation "com.android.support:support-annotations:$vSupportLib"
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'

    //image processing
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glide_version"
    implementation "jp.wasabeef:glide-transformations:$glide_transform_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    //parser
    implementation "com.google.code.gson:gson:$vGson"

    //reactivex
    implementation "io.reactivex.rxjava2:rxandroid:$vRxAndroid"
    implementation "io.reactivex.rxjava2:rxjava:$vRxJava"
    implementation "com.jakewharton.rxbinding2:rxbinding:$vRxBinding"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:$vRxBinding"

    //network
    implementation "com.squareup.retrofit2:converter-gson:$vConverterGson"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$vAdapterRxJava"
    implementation "com.squareup.retrofit2:retrofit:$vRetrofit2"
    implementation "com.squareup.okhttp3:okhttp:$vOkHttp3"
    implementation "com.squareup.okhttp3:logging-interceptor:$vOkHttp3"

    // dependency injection
    implementation "com.google.dagger:dagger:$vDagger2"
    kapt "com.google.dagger:dagger-compiler:$vDagger2"
    implementation "com.google.dagger:dagger-android-support:$vDagger2Support"
    kapt "com.google.dagger:dagger-android-processor:$vDagger2"

    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'javax.inject:javax.inject:1'
}

android.testVariants.all { variant ->
    variant.getCompileConfiguration().exclude group: 'com.android.support'
    variant.getCompileConfiguration().exclude module: 'okhttp'
}